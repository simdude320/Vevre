import React, { useState } from "react";
import { User } from "@/entities/User";
import { Post } from "@/entities/Post";
import { UploadFile } from "@/integrations/Core";
import { motion } from "framer-motion";
import { 
  Upload, 
  ArrowLeft, 
  MapPin, 
  Hash,
  X,
  Image as ImageIcon,
  Sparkles,
  Camera
} from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function Create() {
  const navigate = useNavigate();
  const [currentUser, setCurrentUser] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [previewUrl, setPreviewUrl] = useState("");
  const [caption, setCaption] = useState("");
  const [location, setLocation] = useState("");
  const [hashtags, setHashtags] = useState([]);
  const [hashtagInput, setHashtagInput] = useState("");
  const [isUploading, setIsUploading] = useState(false);

  React.useEffect(() => {
    loadUser();
  }, []);

  const loadUser = async () => {
    try {
      const user = await User.me();
      setCurrentUser(user);
    } catch (error) {
      console.error("User not authenticated");
      navigate(createPageUrl("Feed"));
    }
  };

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      setSelectedFile(file);
      const url = URL.createObjectURL(file);
      setPreviewUrl(url);
    }
  };

  const addHashtag = () => {
    if (hashtagInput.trim() && !hashtags.includes(hashtagInput.trim())) {
      setHashtags([...hashtags, hashtagInput.trim().replace('#', '')]);
      setHashtagInput("");
    }
  };

  const removeHashtag = (tagToRemove) => {
    setHashtags(hashtags.filter(tag => tag !== tagToRemove));
  };

  const handleHashtagKeyPress = (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      addHashtag();
    }
  };

  const createPost = async () => {
    if (!selectedFile || !currentUser) return;

    setIsUploading(true);
    try {
      // Upload the image first
      const { file_url } = await UploadFile({ file: selectedFile });
      
      // Create the post
      await Post.create({
        image_url: file_url,
        caption: caption.trim(),
        location: location.trim(),
        hashtags: hashtags,
        likes_count: 0,
        comments_count: 0
      });

      // Update user's post count
      const updatedPostCount = (currentUser.posts_count || 0) + 1;
      await User.updateMyUserData({ posts_count: updatedPostCount });

      // Navigate to feed
      navigate(createPageUrl("Feed"));
    } catch (error) {
      console.error("Error creating post:", error);
    } finally {
      setIsUploading(false);
    }
  };

  if (!currentUser) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card className="p-8 max-w-md mx-4">
          <div className="text-center">
            <h2 className="text-2xl font-bold mb-4">Please Log In</h2>
            <Button onClick={() => User.login()}>Sign In</Button>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto px-4 py-6 sm:py-8">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-2 sm:space-x-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => navigate(createPageUrl("Feed"))}
            className="rounded-full flex-shrink-0"
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div>
            <h1 className="text-xl sm:text-2xl font-bold text-slate-900 dark:text-white">Create Post</h1>
            <p className="text-slate-500 text-sm">Share your moment with the world</p>
          </div>
        </div>
        <Button
          onClick={createPost}
          disabled={!selectedFile || isUploading}
          className="bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 px-4 sm:px-6"
          size="sm"
        >
          {isUploading ? (
            <>
              <Sparkles className="w-4 h-4 mr-2 animate-spin" />
              <span className="hidden sm:inline">Publishing...</span>
            </>
          ) : (
            <>
              <Sparkles className="w-4 h-4 mr-2" />
              <span className="hidden sm:inline">Publish</span>
               <span className="sm:hidden">Post</span>
            </>
          )}
        </Button>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* Image Upload */}
        <Card className="lg:order-1">
          <CardHeader>
            <CardTitle className="flex items-center text-base sm:text-lg">
              <ImageIcon className="w-5 h-5 mr-2" />
              Upload Image
            </CardTitle>
          </CardHeader>
          <CardContent>
            {!previewUrl ? (
              <div className="border-2 border-dashed border-slate-300 dark:border-slate-600 rounded-xl p-6 sm:p-8 text-center hover:border-indigo-400 transition-colors">
                <label htmlFor="image-upload" className="cursor-pointer">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleFileSelect}
                    className="hidden"
                    id="image-upload"
                  />
                  <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-indigo-900/30 dark:to-purple-900/30 rounded-full flex items-center justify-center">
                    <Camera className="h-8 w-8 text-indigo-600 dark:text-indigo-400" />
                  </div>
                  <h3 className="text-base sm:text-lg font-semibold mb-2">Choose a photo</h3>
                  <p className="text-slate-500 mb-4 text-sm">Or drag and drop it here</p>
                  <Button variant="outline" asChild size="sm">
                    <span>
                      <Upload className="mr-2 h-4 w-4" />
                      Browse Files
                    </span>
                  </Button>
                </label>
              </div>
            ) : (
              <div className="relative">
                <img
                  src={previewUrl}
                  alt="Preview"
                  className="w-full aspect-square object-cover rounded-xl"
                />
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute top-4 right-4 bg-black/50 hover:bg-black/70 text-white rounded-full"
                  onClick={() => {
                    setSelectedFile(null);
                    setPreviewUrl("");
                  }}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Post Details */}
        <Card className="lg:order-2">
          <CardHeader>
            <CardTitle>Post Details</CardTitle>
            <div className="flex items-center space-x-3">
              <Avatar className="w-10 h-10">
                <AvatarImage src={currentUser.profile_picture_url} />
                <AvatarFallback className="bg-gradient-to-br from-indigo-500 to-purple-600 text-white">
                  {currentUser.username?.[0]?.toUpperCase() || currentUser.full_name?.[0]?.toUpperCase() || 'U'}
                </AvatarFallback>
              </Avatar>
              <div>
                <p className="font-semibold text-slate-900 dark:text-white">
                  {currentUser.username || currentUser.full_name}
                </p>
                <p className="text-sm text-slate-500">Posting as yourself</p>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Caption */}
            <div>
              <Label htmlFor="caption" className="text-sm font-medium">Caption</Label>
              <Textarea
                id="caption"
                placeholder="What's on your mind? Share your story..."
                value={caption}
                onChange={(e) => setCaption(e.target.value)}
                className="mt-2 border-slate-200 dark:border-slate-700 focus:ring-indigo-500 focus:border-indigo-500 min-h-[100px]"
              />
            </div>

            <Separator />

            {/* Location */}
            <div>
              <Label htmlFor="location" className="text-sm font-medium flex items-center">
                <MapPin className="w-4 h-4 mr-1" />
                Location
              </Label>
              <Input
                id="location"
                placeholder="Where was this taken?"
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                className="mt-2 border-slate-200 dark:border-slate-700 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>

            {/* Hashtags */}
            <div>
              <Label className="text-sm font-medium flex items-center">
                <Hash className="w-4 h-4 mr-1" />
                Hashtags
              </Label>
              <Input
                placeholder="Add hashtags... (press Enter or Space)"
                value={hashtagInput}
                onChange={(e) => setHashtagInput(e.target.value)}
                onKeyPress={handleHashtagKeyPress}
                onBlur={addHashtag}
                className="mt-2 border-slate-200 dark:border-slate-700 focus:ring-indigo-500 focus:border-indigo-500"
              />
              {hashtags.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-3">
                  {hashtags.map((tag, index) => (
                    <Badge
                      key={index}
                      variant="outline"
                      className="bg-indigo-50 dark:bg-indigo-950/30 text-indigo-600 dark:text-indigo-400 border-indigo-200 dark:border-indigo-800 hover:bg-indigo-100 dark:hover:bg-indigo-950/50 cursor-pointer"
                      onClick={() => removeHashtag(tag)}
                    >
                      #{tag}
                      <X className="ml-1 h-3 w-3" />
                    </Badge>
                  ))}
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
