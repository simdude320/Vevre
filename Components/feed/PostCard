import React, { useState } from "react";
import { format } from "date-fns";
import { motion } from "framer-motion";
import { Heart, MessageCircle, Share2, Bookmark, MapPin, Clock } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";

export default function PostCard({ post, author, currentUser, isLiked, onLike, index }) {
  const [showComments, setShowComments] = useState(false);
  const [commentText, setCommentText] = useState("");

  const handleComment = (e) => {
    e.preventDefault();
    if (commentText.trim()) {
      console.log("Adding comment:", commentText);
      setCommentText("");
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 30 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1, duration: 0.5 }}
    >
      <Card className="overflow-hidden bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 shadow-lg hover:shadow-xl transition-shadow duration-300">
        {/* Post Header */}
        <div className="p-4 sm:p-6 sm:pb-4">
          <div className="flex items-start justify-between">
            <div className="flex items-center space-x-3">
              <Avatar className="w-10 h-10 sm:w-12 sm:h-12 ring-2 ring-indigo-100 dark:ring-indigo-900">
                <AvatarImage src={author?.profile_picture_url} />
                <AvatarFallback className="bg-gradient-to-br from-indigo-500 to-purple-600 text-white font-semibold">
                  {author?.username?.[0]?.toUpperCase() || author?.full_name?.[0]?.toUpperCase() || 'U'}
                </AvatarFallback>
              </Avatar>
              <div>
                <div className="flex items-center space-x-2">
                  <h3 className="font-semibold text-sm sm:text-base text-slate-900 dark:text-white">
                    {author?.username || author?.full_name || 'Unknown User'}
                  </h3>
                  <Badge variant="secondary" className="text-[10px] px-1.5 py-0.5 sm:text-xs sm:px-2 sm:py-0.5">
                    Pro
                  </Badge>
                </div>
                <div className="flex items-center flex-wrap gap-x-3 text-xs sm:text-sm text-slate-500">
                  <div className="flex items-center space-x-1">
                    <Clock className="w-3 h-3" />
                    <span>{format(new Date(post.created_date), "MMM d, h:mm a")}</span>
                  </div>
                  {post.location && (
                    <div className="flex items-center space-x-1">
                      <MapPin className="w-3 h-3" />
                      <span>{post.location}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
            <Button variant="ghost" size="sm" className="text-slate-400 hover:text-slate-600 w-8 h-8 flex-shrink-0">
              <Bookmark className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {/* Post Content */}
        <CardContent className="px-4 sm:px-6 py-0">
          {/* Caption */}
          {post.caption && (
            <div className="mb-4">
              <p className="text-slate-700 dark:text-slate-300 leading-relaxed text-sm sm:text-base">
                {post.caption}
              </p>
            </div>
          )}

          {/* Hashtags */}
          {post.hashtags && post.hashtags.length > 0 && (
            <div className="mb-4">
              <div className="flex flex-wrap gap-2">
                {post.hashtags.map((tag, tagIndex) => (
                  <Badge
                    key={tagIndex}
                    variant="outline"
                    className="bg-indigo-50 dark:bg-indigo-950 text-indigo-600 dark:text-indigo-400 border-indigo-200 dark:border-indigo-800 hover:bg-indigo-100 dark:hover:bg-indigo-900 cursor-pointer"
                  >
                    #{tag}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Image */}
          {post.image_url && (
            <div className="mb-4">
              <div className="relative rounded-xl overflow-hidden bg-slate-100 dark:bg-slate-700">
                <img
                  src={post.image_url}
                  alt="Post content"
                  className="w-full max-h-[70vh] object-cover"
                  onError={(e) => {
                    e.target.style.display = 'none';
                    e.target.nextElementSibling.style.display = 'flex';
                  }}
                />
                <div className="hidden w-full h-48 items-center justify-center bg-gradient-to-br from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-600">
                  <div className="text-center">
                    <div className="w-12 h-12 mx-auto mb-2 rounded-full bg-slate-200 dark:bg-slate-500 flex items-center justify-center">
                      <span className="text-lg">üñºÔ∏è</span>
                    </div>
                    <p className="text-sm text-slate-500">Image unavailable</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="flex items-center justify-between py-3 sm:py-4">
            <div className="flex items-center space-x-1 sm:space-x-2">
              <Button
                variant="ghost"
                size="sm"
                className={`px-2 py-2 sm:px-3 ${
                  isLiked 
                    ? 'text-red-500 bg-red-50 dark:bg-red-950/20' 
                    : 'text-slate-500 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-950/20'
                }`}
                onClick={onLike}
              >
                <Heart
                  className={`w-5 h-5 mr-1 sm:mr-2 transition-all duration-200 ${
                    isLiked ? 'fill-current scale-110' : ''
                  }`}
                />
                <span className="font-medium text-sm">{post.likes_count || 0}</span>
              </Button>

              <Button
                variant="ghost"
                size="sm"
                className="px-2 sm:px-3 py-2 text-slate-500 hover:text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-950/20"
                onClick={() => setShowComments(!showComments)}
              >
                <MessageCircle className="w-5 h-5 mr-1 sm:mr-2" />
                <span className="font-medium text-sm">{post.comments_count || 0}</span>
              </Button>

              <Button
                variant="ghost"
                size="sm"
                className="px-2 sm:px-3 py-2 text-slate-500 hover:text-green-500 hover:bg-green-50 dark:hover:bg-green-950/20"
              >
                <Share2 className="w-5 h-5 mr-1 sm:mr-2" />
                <span className="font-medium text-sm hidden sm:inline">Share</span>
              </Button>
            </div>

            <div className="text-xs sm:text-sm text-slate-400 hidden sm:block">
              {post.likes_count > 0 && `${post.likes_count} ${post.likes_count === 1 ? 'person likes' : 'people like'} this`}
            </div>
          </div>

          {/* Comments Section */}
          {showComments && (
            <>
              <Separator className="mb-4" />
              <div className="pb-4">
                <form onSubmit={handleComment} className="flex items-center space-x-3">
                  <Avatar className="w-8 h-8">
                    <AvatarImage src={currentUser?.profile_picture_url} />
                    <AvatarFallback className="bg-gradient-to-br from-indigo-500 to-purple-600 text-white text-sm">
                      {currentUser?.username?.[0]?.toUpperCase() || currentUser?.full_name?.[0]?.toUpperCase() || 'U'}
                    </AvatarFallback>
                  </Avatar>
                  <Input
                    placeholder="Write a comment..."
                    value={commentText}
                    onChange={(e) => setCommentText(e.target.value)}
                    className="flex-1 border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-700/50 focus:ring-indigo-500 focus:border-indigo-500"
                  />
                  {commentText.trim() && (
                    <Button 
                      type="submit" 
                      size="sm"
                      className="bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700"
                    >
                      Post
                    </Button>
                  )}
                </form>
              </div>
            </>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}
